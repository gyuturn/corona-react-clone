{"version":3,"sources":["components/Header.js","components/Contents.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Contents","useState","labels","datasets","label","backgroundColor","fill","data","confirmedData","setConfirmedData","borderColor","quarantinedData","setQuarantinedData","comparedData","setcomparedData","useEffect","fetchEvents","a","axios","get","res","console","log","makeData","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","push","map","last","length","options","title","legend","display","position","text","fontsize","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.172f3397.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n        <h1>COVID-19</h1>\r\n        <select>\r\n          <option>국내</option>\r\n          <option>세계</option>\r\n        </select>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport {Bar,Doughnut, Line} from \"react-chartjs-2\"\r\n\r\nconst Contents = () => {\r\n\r\n    const [confirmedData, setConfirmedData] = useState({\r\n        labels:[\"1월\",\"2월\",\"3월\"],\r\n                datasets: [\r\n                    {\r\n                        label:\"국내 누적 확진자\",\r\n                        backgroundColor:\"salmon\",\r\n                        fill:true,\r\n                        data: [10,5,3]\r\n                    }\r\n                ]\r\n    });\r\n\r\n    const [quarantinedData, setQuarantinedData] = useState({\r\n        labels:[\"1월\",\"2월\",\"3월\"],\r\n        datasets: [\r\n            {\r\n                label:\"월별 격리자 현황\",\r\n                borderColor:\"salmon\",\r\n                fill:false,\r\n                data: [10,5,3]\r\n            }\r\n        ]\r\n    });\r\n\r\n    const [comparedData, setcomparedData] = useState({\r\n        labels:[\"1월\",\"2월\",\"3월\"],\r\n        datasets: [\r\n            {\r\n                label:\"월별 격리자 현황\",\r\n                borderColor:\"salmon\",\r\n                fill:false,\r\n                data: [10,5,3]\r\n            }\r\n        ]\r\n    });\r\n\r\n    useEffect(() => {\r\n        \r\n        const fetchEvents = async () => {\r\n            const res= await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\");\r\n            console.log(res);\r\n            makeData(res.data);\r\n            // fetch(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n            // .then(data=>data.json())\r\n            // .then(js=>console.log(js));\r\n        }\r\n        const makeData = (items) =>{\r\n            const arr= items.reduce((acc, cur)=>{\r\n                const currentDate= new Date(cur.Date);\r\n\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n                const confirmed=cur.Confirmed;\r\n                const active=cur.Active;\r\n                const death=cur.Deaths;\r\n                const recovered=cur.Recovered;\r\n\r\n                const findItem= acc.find(a=> a.year === year && a.month=== month)\r\n            \r\n                if(!findItem){\r\n                    acc.push(\r\n                        {\r\n                            year:year, month: month,date:date, confirmed,active,death,recovered\r\n                        }\r\n                    )\r\n                }\r\n                if(findItem && findItem.date< date){\r\n                    findItem.active=active;\r\n                    findItem.death=death;\r\n                    findItem.date=date;\r\n                    findItem.year=year;\r\n                    findItem.month=month;\r\n                    findItem.recovered=recovered;\r\n                    findItem.confirmed=confirmed;\r\n                }\r\n                return acc;\r\n            },[])\r\n           \r\n            const labels= arr.map(a=> `${a.month+1}월`)\r\n            setConfirmedData({\r\n                labels,\r\n                datasets: [\r\n                    {\r\n                        label:\"국내 누적 확진자\",\r\n                        backgroundColor:\"salmon\",\r\n                        fill:true,\r\n                        data: arr.map(a=>a.confirmed)\r\n                    }\r\n                ]\r\n            })\r\n\r\n            setQuarantinedData({\r\n                labels,\r\n                datasets: [\r\n                    {\r\n                        label:\"월별 격리자 현황\",\r\n                        borderColor:\"salmon\",\r\n                        fill:false,\r\n                        data: arr.map(a=>a.active)\r\n                    }\r\n                ]\r\n            })\r\n            const last=arr[arr.length-1]\r\n            setcomparedData({\r\n                labels:[\"확진자\",\"격리해제\",\"사망\"],\r\n                datasets: [\r\n                    {\r\n                        label:\"누적 확진,해제,사망 비율\",\r\n                        backgroundColor:[\"#ff3d67\",\"#059bff\",\"#ffc233\"],\r\n                        borderColor:[\"#ff3d67\",\"#059bff\",\"#ffc233\"],\r\n                        fill:false,\r\n                        data: [last.confirmed,last.recovered,last.death]\r\n                    }\r\n                ]\r\n            })\r\n        }\r\n\r\n\r\n        fetchEvents();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <section>\r\n        <h2>국내 코로나 현황</h2>\r\n        <div className=\"contents\">\r\n            <div>\r\n                <Bar \r\n                data={confirmedData}\r\n                 options={\r\n                        {   title:{\r\n                                    // display: true, text:\"누적 확진자 추이\", fontsize:16,\r\n                            },\r\n                            legend: {\r\n                                display: true, position:\"bottom\" // label 숨기기\r\n                            },\r\n                        }\r\n                    }\r\n                    />\r\n            </div>\r\n            <div>\r\n                <Line \r\n                data={quarantinedData}\r\n                 options={\r\n                        {   title:{\r\n                                    display: true, text:\"월별 격리자 현황\", fontsize:16,\r\n                            },\r\n                            legend: {\r\n                                display: true, position:\"bottom\" // label 숨기기\r\n                            },\r\n                        }\r\n                    }\r\n                    />\r\n            </div>\r\n            <div>\r\n                <Doughnut \r\n                data={comparedData}\r\n                 options={\r\n                        {   title:{\r\n                                    display: true, text:`누적 확진, 해제, 사망 (${new Date().getMonth+1}월)`, fontsize:16,\r\n                            },\r\n                            legend: {\r\n                                display: true, position:\"bottom\" // label 숨기기\r\n                            },\r\n                        }\r\n                    }\r\n                    />\r\n            </div>\r\n\r\n        </div>\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default Contents\r\n","\nimport './App.css';\nimport Header from './components/Header'\nimport Contents from './components/Contents';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Contents />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}